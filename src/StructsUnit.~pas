unit StructsUnit;

interface

uses
  Graphics, XMLIntf, Classes, VirtualTrees;

type
  TTagInfo = class
  private
    FName: string;
    FColor: TColor;
    FEnabled: Boolean;
    FGroupName: string;
    procedure SetColor(const Value: TColor);
    procedure SetEnabled(const Value: Boolean);
  public
    constructor Create(const AName: string; const AColor: TColor = clHighlightText;
      const AGroupName: string = '');

    procedure LoadFromXMLNode(const ANode: IXMLNode);
    function SaveToXMLNode(const ARootNode: IXMLNode): IXMLNode;

    property Name: string read FName write FName;
    property Enabled: Boolean read FEnabled write SetEnabled;
    property Color: TColor read FColor write SetColor;
    property GroupName: string read FGroupName write FGroupName;
  end;

  TTagList = class
  private
    FList: TList;
    function GetItem(const AIndex: Integer): TTagInfo;
  public
    constructor Create;
    destructor Destroy; override;

    procedure LoadFromXMLNode(const ANode: IXMLNode);
    function SaveToXMLNode(const ARootNode: IXMLNode): IXMLNode;

    procedure Add(const ATagInfo: TTagInfo);
    procedure Remove(const ATagInfo: TTagInfo);
    function Count: Integer;

    function IsMatch(const ATextRow: string): Boolean;

    property Items[const AIndex: Integer]: TTagInfo read GetItem; default;


  end;

  TRowInfo = class
    Node: PVirtualNode;
    RowNumber: Integer;
    constructor Create(const AOriginIndex: Integer);
  end;

function RestoreEsc(const AText: string): string;
function ChangeEsc(const AText: string): string;

implementation

uses
  SysUtils, StrUtils;

var
  ESC: TStringList;

{ TTagInfo }

function ChangeEsc(const AText: string): string;
var
  i: Integer;
begin
  Result := AText;
  for i := 0 to ESC.Count - 1 do
    Result := AnsiReplaceText(Result, ESC.Names[i], ESC.ValueFromIndex[i]);
//  Result := AnsiReplaceText(AText, '[', '_ls_');
//  Result := AnsiReplaceText(Result, ']', '_rs_');
//  Result := AnsiReplaceText(Result, ' ', '_ws_');
end;

function RestoreEsc(const AText: string): string;
var
  i: Integer;
begin
  Result := AText;
  for i := 0 to ESC.Count - 1 do
    Result := AnsiReplaceText(Result, ESC.ValueFromIndex[i], ESC.Names[i]);
//  Result := AnsiReplaceText(AText, '_ls_', '[');  //left skobka
//  Result := AnsiReplaceText(Result, '_rs_', ']'); //right skobka
//  Result := AnsiReplaceText(Result, '_ws_', ' '); //white space
end;

constructor TTagInfo.Create(const AName: string; const AColor: TColor = clHighlightText;
  const AGroupName: string = '');
begin
  FName := AName;
  FEnabled := True;
  FColor := AColor;
  FGroupName := AGroupName;
end;

procedure TTagInfo.LoadFromXMLNode(const ANode: IXMLNode);
begin
  if ANode = nil then Exit;
  FEnabled := ANode.Attributes['checked'];
  FColor := ANode.Attributes['color'];
  FName := RestoreEsc(ANode.NodeName);
  FGroupName := RestoreEsc(ANode.Attributes['groupname']);
end;

function TTagInfo.SaveToXMLNode(const ARootNode: IXMLNode): IXMLNode;
begin
  Result := ARootNode.AddChild(ChangeEsc(Name));
  Result.Attributes['checked'] := Enabled;
  Result.Attributes['color'] := FColor;
  Result.Attributes['groupname'] := ChangeEsc(FGroupName);
end;

procedure TTagInfo.SetColor(const Value: TColor);
begin
  FColor := Value;
end;

procedure TTagInfo.SetEnabled(const Value: Boolean);
begin
  FEnabled := Value;
end;

{ TRowInfo }

constructor TRowInfo.Create(const AOriginIndex: Integer);
begin
  RowNumber := AOriginIndex;
end;

{ TTagList }

procedure TTagList.Add(const ATagInfo: TTagInfo);
begin
  FList.Add(ATagInfo);
end;

function TTagList.Count: Integer;
begin
  Result := FList.Count;
end;

constructor TTagList.Create;
begin
  FList := TList.Create;
end;

destructor TTagList.Destroy;
var
  i: Integer;
begin
  for i := 0 to FList.Count - 1 do
    TTagInfo(FList[i]).Free;
  FreeAndNil(FList);
  inherited;
end;

function TTagList.GetItem(const AIndex: Integer): TTagInfo;
begin
  Result := TTagInfo(FList[AIndex]);
end;

function TTagList.IsMatch(const ATextRow: string): Boolean;
var
  i: Integer;
  vItem: TTagInfo;
begin
  Result := False;
  for i := 0 to Count - 1 do
  begin
    vItem := Items[i];
    if vItem.Enabled and (Pos(vItem.Name, ATextRow) > 0) then
    begin
      Result := True;
      Break;
    end;
  end;
end;

procedure TTagList.LoadFromXMLNode(const ANode: IXMLNode);
var
  i: Integer;
  vItem: TTagInfo;
begin
  if ANode = nil then Exit;
  for i := 0 to ANode.ChildNodes.Count - 1 do
  begin
    vItem := TTagInfo.Create('');
    vItem.LoadFromXMLNode(ANode.ChildNodes[i]);
    Add(vItem);
  end;
end;

procedure TTagList.Remove(const ATagInfo: TTagInfo);
var
  i: Integer;
begin
  i := FList.IndexOf(ATagInfo);
  if i > -1 then
  begin
    FList.Remove(ATagInfo);
    ATagInfo.Free;
  end;
end;

function TTagList.SaveToXMLNode(const ARootNode: IXMLNode): IXMLNode;
var
  i: Integer;
begin
  Result := ARootNode.AddChild('Tags');
  for i := 0 to Count - 1 do
    Items[i].SaveToXMLNode(Result);
end;

initialization
  ESC := TStringList.Create;
  ESC.Values[' '] := '_ws_';
  ESC.Values['['] := '_ls_';
  ESC.Values[']'] := '_rs_';
end.
